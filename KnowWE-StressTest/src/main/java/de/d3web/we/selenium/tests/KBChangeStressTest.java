/*
 * Copyright (C) 2010 University Wuerzburg, Computer Science VI
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package de.d3web.we.selenium.tests;

import com.thoughtworks.selenium.SeleniumException;

import de.d3web.we.selenium.main.StressTestCase;

/**
 * This Test simulates many changes in all parts of a KnowledgeBase even for the
 * new Markup. It is checked whether the page containing the KB is responding
 * all the time, because it can happen that this page crashes and the Wiki still
 * works. This behavior occurs rarely, so a run will not prove that everything
 * is fine. Please check once in a whilte the console for SeleniumExceptions,
 * because these will terminate the Test without a failure.
 * 
 * @author Max Diez
 * @created 21.07.2010
 */
public class KBChangeStressTest extends StressTestCase {

	// Locators for the sections to be changed (different for Markup).
	String rulesSecLoc;
	String questionsSecLoc;
	String questionnairesSecLoc;
	String coveringSecLoc;

	final String ruleArea = bundle.getString("KnowWE.SeleniumStressTest.Markup.ruleArea");
	// Specifies the "level of stress" generated by this test (low, middle or
	// high). Notify that a higher level means more speed but even more error
	// possibilities (for example a page didn't load completely or an element
	// isn't present yet).
	final String level = bundle.getString("KnowWE.SeleniumStressTest.level");

	/**
	 * Tests changes in Rules-section, Questions-section, Questionnaires-section
	 * and SetCoveringList-Section.
	 * 
	 * @throws InterruptedException
	 * @created 21.07.2010
	 */
	public void testManyChangesInKB() throws InterruptedException {
		rulesSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.KB.rulesSecLoc");
		questionsSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.KB.questionsSecLoc");
		questionnairesSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.KB.questionnairesSecLoc");
		coveringSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.KB.coveringSecLoc");

		stressChangeKnowledge(bundle.getString("KnowWE.SeleniumStressTest.url")
				+ bundle.getString("KnowWE.SeleniumStressTest.KB.page"));
	}

	/**
	 * Tests changes in the Markup: Rule, questiontree and CoveringList.
	 * 
	 * @created 19.08.2010
	 * @throws InterruptedException
	 */
	public void testManyChangesInMarkup() throws InterruptedException {
		rulesSecLoc = ruleArea +
				bundle.getString("KnowWE.SeleniumStressTest.Markup.rulesSecLoc");
		questionsSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.Markup.questionsSecLoc");
		questionnairesSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.Markup.questionnairesSecLoc");
		coveringSecLoc =
				bundle.getString("KnowWE.SeleniumStressTest.Markup.coveringSecLoc");

		stressChangeKnowledge(bundle.getString("KnowWE.SeleniumStressTest.url")
				+ bundle.getString("KnowWE.SeleniumStressTest.Markup.page"));
	}

	/**
	 * Changes one section in the KnowledgeBase. In the properties-file you can
	 * set the "stress-level" which specifies how "linear" the test is: low
	 * means the action waits until the QuickEdit finished saving, middle means
	 * it only waits at the beginning for the QuickEdit which should be used
	 * right now and high means it doesn't wait at all (vulnerable to
	 * SeleniumExceptions).
	 * 
	 * @created 22.07.2010
	 * @param locator Section's xpath of the QuickEdit to be changed.
	 * @param newContent New Content copied into the textarea (deleting the
	 *        existing one).
	 */
	private String saveNewKnowledge(String locator, String newContent) {
		String textarea = locator + "/default-edit-area";
		if (locator.length() == 0) return "";
		if (level.equals("middle") || level.equals("low")) waitForElement(locator + QEB);
		if (!selenium.isElementPresent(textarea)) {
			doSelActionAndWait(locator + QEB, "click");
		}
		waitForElement(textarea);
		String oldContent = selenium.getValue(textarea) + "\n\n";
		if (newContent != null) doSelActionAndWait(textarea, "type",
				newContent);
		doSelActionAndWait(locator
				+ ACCEPT, "click");
		if (level.equals("low")) waitForElement(locator + QEB);
		return oldContent;
	}

	/**
	 * Opens a browser and runs the changes in changeKnowledg√®() again and again
	 * until the time expires. SeleniumExceptions (like Element not found) are
	 * caught and will not cause a test fail. Afterwards the Test-Page is tested
	 * whether it is still responding or not and if the whole server still runs
	 * or not.
	 * 
	 * @created 24.08.2010
	 * @param url Pagename (within the wiki) of the testpage.
	 */
	private void stressChangeKnowledge(String url) {
		long startTime = System.currentTimeMillis();

		open(url);
		while (System.currentTimeMillis() - startTime < testDuration) {
			try {
				changeKnowledge();
			}
			catch (SeleniumException se) {
				se.printStackTrace();
				break;
			}
		}
		pageCheck(url);
	}

	/**
	 * Running one changing loop with different actions. Differs between Markup
	 * and not-Markup, because Rules for example has one QuickEdit for each rule
	 * instead one for all.
	 * 
	 * @created 18.08.2010
	 */
	private void changeKnowledge() {
		// Distinguish between Markup (many QE) and Normal in Rules-section
		if (rulesSecLoc.startsWith("Markup")) {
			// Different rules differ only in number (of
			// ConditionActionRule'number')
			String[] content = new String[20];
			content = forEachRuleInMarkup(rulesSecLoc, content);
			saveNewKnowledge(
					rulesSecLoc,
					"IF (Fuel = unleaded gasoline AND Exhaust pipe color = grey )\nTHEN Exhaust pipe color evaluation += abnormal\n\n");

			saveNewKnowledge(
					rulesSecLoc + 3,
					"IF (Exhaust pipe color = brown OR Exhaust pipe color = grey)\nTHEN Exhaust pipe color evaluation += normal\n\n");

			saveNewKnowledge(
					rulesSecLoc + 4,
					"IF (\"Num. Mileage evaluation\" >= 110 AND \"Num. Mileage evaluation\" <= 130 AND Exhaust pipe color = grey)\nTHEN Mileage evaluation = slightly increased\n\n\n");

			saveNewKnowledge(rulesSecLoc, "IF\n\n");

			saveNewKnowledge(
					rulesSecLoc + 6,
					"IF \"Num. Mileage evaluation\" < 100\nTHEN Mileage evaluation = normal\n\n");
			// Delete and reset all rules
			String[] noContent = new String[content.length];
			for (int i = 0; i < noContent.length; i++) {
				noContent[i] = "IF\n\n";
			}
			forEachRuleInMarkup(rulesSecLoc, noContent);
			forEachRuleInMarkup(rulesSecLoc, content);
		}
		else {
			saveNewKnowledge(
					rulesSecLoc,
					"The evalutaion of the exhaust pipe color depends on the type of fuel:\n\nIF (Fuel = unleaded gasoline AND Exhaust pipe color = sooty black )\nTHEN Exhaust pipe color evaluation += abnormal\n\nIF (Fuel = diesel OR Exhaust pipe color = sooty black)\nTHEN Exhaust pipe color evaluation += normal  \n\nIF (Exhaust pipe color = brown OR Exhaust pipe color = grey OR Exhaust pipe color = light grey)\nTHEN Exhaust pipe color evaluation += normal  \n\n\nMileage is slightly increased when real mileage is between 110 and 130 percent of the average mileage:\n\nIF (\"Num. Mileage evaluation\" >= 110 AND \"Num. Mileage evaluation\" <= 130)\nTHEN Mileage evaluation = slightly increased \n\nMileage is definitly increased if the real mileage is more than 130 percent of the average mileage:\n\nIF \"Num. Mileage evaluation\" > 130\nTHEN Mileage evaluation = increased  \n\nMileage evaluation is normal when it is lower than 110 percent of average mileage:\n\nIF \"Num. Mileage evaluation\" < 110\nTHEN Mileage evaluation = normal\n\n\nCompute the percentual mileage increase from the real and the average mileage:\n\nIF \"Average mileage /100km\" > 0 AND KNOWN[\"Real mileage  /100km\"]\nTHEN \"Num. Mileage evaluation\" = ((\"Real mileage  /100km\" / \"Average mileage /100km\") * 100.0)");

			saveNewKnowledge(
					rulesSecLoc,
					"The evalutaion of the exhaust pipe color depends on the type of fuel:\n\nIF (Fuel = unleaded gasoline AND Exhaust pipe color = sooty black )\nTHEN Exhaust pipe color evaluation += abnormal\n\nIF (Fuel = diesel AND Exhaust pipe color = sooty black)\nTHEN Exhaust pipe color evaluation += normal  \n\nIF (Exhaust pipe color = brown OR Exhaust pipe color = grey OR Exhaust pipe color = light grey)\nTHEN Exhaust pipe color evaluation += normal  \n\n\nMileage is slightly increased when real mileage is between 110 and 130 percent of the average mileage:\n\nIF (\"Num. Mileage evaluation\" >= 110 AND \"Num. Mileage evaluation\" <= 130)\nTHEN Mileage evaluation = slightly increased \n\nMileage is definitly increased if the real mileage is more than 130 percent of the average mileage:\n\nIF \"Num. Mileage evaluation\" > 130\nTHEN Mileage evaluation = increased  \n\nMileage evaluation is normal when it is lower than 110 percent of average mileage:\n\nIF \"Num. Mileage evaluation\" < 110\nTHEN Mileage evaluation = normal\n\n\nCompute the percentual mileage increase from the real and the average mileage:\n\nIF \"Average mileage /100km\" > 0 AND KNOWN[\"Real mileage  /100km\"]\nTHEN \"Num. Mileage evaluation\" = ((\"Real mileage  /100km\" / \"Average mileage /100km\") * 100.0)");

			saveNewKnowledge(
					rulesSecLoc,
					"The evalutaion of the exhaust pipe color depends on the type of fuel:\n\nIF (Fuel = unleaded gasoline AND Exhaust pipe color = sooty black )\nTHEN Exhaust pipe color evaluation += abnormal\n\nIF (Fuel = diesel AND Exhaust pipe color = sooty black)\nTHEN Exhaust pipe color evaluation += normal  \n\nIF (Exhaust pipe color = brown OR Exhaust pipe color = grey OR Exhaust pipe color = light grey)\nTHEN Exhaust pipe color evaluation += normal  \n\n\nMileage is slightly increased when real mileage is between 110 and 130 percent of the average mileage:\n\nIF (\"Num. Mileage evaluation\" >= 110 AND \"Num. Mileage evaluation\" <= 130)\nTHEN Mileage evaluation = slightly increased \n\nMileage is definitly increased if the real mileage is more than 130 percent of the average mileage:\n\n\n\n\nCompute the percentual mileage increase from the real and the average mileage:\n\nIF \"Average mileage /100km\" > 0 AND KNOWN[\"Real mileage  /100km\"]\nTHEN \"Num. Mileage evaluation\" = ((\"Real mileage  /100km\" / \"Average mileage /100km\") * 100.0)");

			saveNewKnowledge(rulesSecLoc, "Test\n");

			saveNewKnowledge(
					rulesSecLoc,
					"The evalutaion of the exhaust pipe color depends on the type of fuel:\n\nIF (Fuel = unleaded gasoline AND Exhaust pipe color = sooty black )\nTHEN Exhaust pipe color evaluation += abnormal\n\nIF (Fuel = diesel AND Exhaust pipe color = sooty black)\nTHEN Exhaust pipe color evaluation += normal  \n\nIF (Exhaust pipe color = brown OR Exhaust pipe color = grey OR Exhaust pipe color = light grey)\nTHEN Exhaust pipe color evaluation += normal  \n\n\nMileage is slightly increased when real mileage is between 110 and 130 percent of the average mileage:\n\nIF (\"Num. Mileage evaluation\" >= 110 AND \"Num. Mileage evaluation\" <= 130)\nTHEN Mileage evaluation = slightly increased \n\nMileage is definitly increased if the real mileage is more than 130 percent of the average mileage:\n\nIF \"Num. Mileage evaluation\" > 130\nTHEN Mileage evaluation = increased  \n\nMileage evaluation is normal when it is lower than 110 percent of average mileage:\n\nIF \"Num. Mileage evaluation\" < 110\nTHEN Mileage evaluation = normal\n\n\nCompute the percentual mileage increase from the real and the average mileage:\n\nIF \"Average mileage /100km\" > 0 AND KNOWN[\"Real mileage  /100km\"]\nTHEN \"Num. Mileage evaluation\" = ((\"Real mileage  /100km\" / \"Average mileage /100km\") * 100.0)");
		}

		saveNewKnowledge(
				questionsSecLoc,
				"Observations\n- Exhaust fumes [oc]\n-- yellow\n-- blue\n-- invisible\n- Exhaust pipe color ~ What is the color of the exhaust pipe? [oc]\n-- brown\n-- yellow\n-- light grey\n-- sooty black\n-- Exhaust pipe color evaluation [oc]<abstrakt>\n--- abnormal\n--- normal\n- Fuel [oc]\n-- diesel\n-- unleaded gasoline\n- \"Average mileage /100km\" [num]\n-- \"Num. Mileage evaluation\" [num]<abstrakt>\n--- Mileage evaluation [oc]<abstrakt>\n---- slightly increased\n---- normal\n---- increased\n- Engine start [oc]\n-- engine barely starts\n-- engine starts\n-- does not start\n- Starter [oc]\n-- does not turn over\n-- turns over\n- Driving [mc]\n-- insufficient power on partial load\n-- insufficient power on full load\n-- unsteady idle speed\n-- low idle speed\n-- \"delayed take-off\"\n-- weak acceleration\n-- \"no /else\"\n\n- \"Real mileage  /100km\" [num]\n- Engine noises [oc]\n-- knocking\n-- ringing\n-- \"no /else\"\n\nGeneral\n- Make of car [oc]\n-- VW\n-- Opel\n-- Mercedes Benz\n-- BMW\n-- Porsche\n-- Fiat\n-- Toyota\n-- Mazda\n-- Other\n- Year of construction [num]\n\nTechnical Examinations\n- \"Idle speed system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air intake system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air filter o.k.?\" [oc]\n-- yes\n-- no\n- \"Ignition timing o.k.?\" [oc]\n-- yes\n-- no\n- \"Battery o.k.?\" [oc]\n-- yes\n-- no");

		saveNewKnowledge(
				questionsSecLoc,
				"Observations\n- Exhaust fumes [oc]\n-- black\n-- blue\n-- invisible\n- Exhaust pipe color ~ What is the color of the exhaust pipe? [oc]\n-- brown\n-- grey\n-- light grey\n-- sooty black\n-- Exhaust pipe color evaluation [oc]<abstrakt>\n--- abnormal\n--- normal\n- Fuel [oc]\n-- diesel\n-- unleaded gasoline\n- \"Average mileage /100km\" [num]\n-- \"Num. Mileage evaluation\" [num]<abstrakt>\n--- Mileage evaluation [oc]<abstrakt>\n---- slightly increased\n---- normal\n---- increased\n- Engine start [oc]\n-- engine barely starts\n-- engine starts\n-- does not start\n- Starter [oc]\n-- does not turn over\n-- turns over\n- Driving [mc]\n-- insufficient power on partial load\n-- insufficient power on full load\n-- unsteady idle speed\n-- low idle speed\n-- \"delayed take-off\"\n-- weak acceleration\n-- \"no /else\"\n\n- \"Real mileage  /100km\" [num]\n- Engine noises [oc]\n-- knocking\n-- ringing\n-- \"no /else\"\n\nGeneral\n- Make of car [oc]\n-- VW\n-- Opel\n-- Mercedes Benz\n-- BMW\n-- Porsche\n-- Fiat\n-- Toyota\n-- Mazda\n-- Other\n- Year of construction [num]\n\nTechnical Examinations\n- \"Idle speed system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air intake system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air filter o.k.?\" [oc]\n-- yes\n-- no\n- \"Ignition timing o.k.?\" [oc]\n-- yes\n-- no\n- \"Battery o.k.?\" [oc]\n-- yes\n-- no");

		saveNewKnowledge(
				questionsSecLoc,
				"Observations\n- Exhaust fumes [oc]\n-- black\n-- blue\n-- invisible\n- Exhaust pipe color ~ What is the color of the exhaust pipe? [oc]\n-- brown\n-- grey\n-- light grey\n-- sooty black\n-- Exhaust pipe color evaluation [oc]<abstrakt>\n--- abnormal\n--- normal\n- Fuel [oc]\n-- diesel\n-- unleaded gasoline\n- \"Average mileage /100km\" [num]\n-- \"Num. Mileage evaluation\" [num]<abstrakt>\n--- Mileage evaluation [oc]<abstrakt>\n---- slightly increased\n---- normal\n---- increased\n- Engine start [oc]\n-- engine barely starts\n-- engine starts\n-- does not start\n- Starter [oc]\n-- does not turn over\n-- turns over\n\n\n- \"Real mileage  /100km\" [num]\n- Engine noises [oc]\n-- knocking\n-- ringing\n-- \"no /else\"\n\nGeneral\n- Make of car [oc]\n-- VW\n-- Opel\n-- Mercedes Benz\n-- BMW\n-- Porsche\n-- Fiat\n-- Toyota\n-- Mazda\n-- Other\n- Year of construction [num]\n\nTechnical Examinations\n- \"Idle speed system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air intake system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air filter o.k.?\" [oc]\n-- yes\n-- no\n- \"Ignition timing o.k.?\" [oc]\n-- yes\n-- no\n- \"Battery o.k.?\" [oc]\n-- yes\n-- no");

		saveNewKnowledge(
				questionsSecLoc,
				"Observations\n- Exhaust fumes [oc]\n-- black\n-- blue\n-- invisible\n- Exhaust pipe color ~ What is the color of the exhaust pipe? [oc]\n-- brown\n-- grey\n-- light grey\n-- sooty black\n-- Exhaust pipe color evaluation [oc]<abstrakt>\n--- abnormal\n--- normal\n- Fuel [oc]\n-- diesel\n-- unleaded gasoline\n- \"Average mileage /100km\" [num]\n-- \"Num. Mileage evaluation\" [num]<abstrakt>\n--- Mileage evaluation [oc]<abstrakt>\n---- slightly increased\n---- normal\n---- increased\n- Engine start [oc]\n-- engine barely starts\n-- engine starts\n-- does not start\n- Starter [oc]\n-- does not turn over\n-- turns over\n- Driving [mc]\n-- insufficient power on partial load\n-- insufficient power on full load\n-- unsteady idle speed\n-- low idle speed\n-- \"delayed take-off\"\n-- weak acceleration\n-- \"no /else\"\n\n- \"Real mileage  /100km\" [num]\n- Engine noises [oc]\n-- knocking\n-- ringing\n-- \"no /else\"\n\nGeneral\n- Make of car [oc]\n-- VW\n-- Opel\n-- Mercedes Benz\n-- BMW\n-- Porsche\n-- Fiat\n-- Toyota\n-- Mazda\n-- Other\n- Year of construction [num]\n\nTechnical Examinations\n- \"Idle speed system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air intake system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air filter o.k.?\" [oc]\n-- yes\n-- no\n- \"Ignition timing o.k.?\" [oc]\n-- yes\n-- no\n- \"Battery o.k.?\" [oc]\n-- yes\n-- no");

		saveNewKnowledge(questionsSecLoc, "Test\n");

		saveNewKnowledge(
				questionsSecLoc,
				"Observations\n- Exhaust fumes [oc]\n-- black\n-- blue\n-- invisible\n- Exhaust pipe color ~ What is the color of the exhaust pipe? [oc]\n-- brown\n-- grey\n-- light grey\n-- sooty black\n-- Exhaust pipe color evaluation [oc]<abstrakt>\n--- abnormal\n--- normal\n- Fuel [oc]\n-- diesel\n-- unleaded gasoline\n- \"Average mileage /100km\" [num]\n-- \"Num. Mileage evaluation\" [num]<abstrakt>\n--- Mileage evaluation [oc]<abstrakt>\n---- slightly increased\n---- normal\n---- increased\n- Engine start [oc]\n-- engine barely starts\n-- engine starts\n-- does not start\n- Starter [oc]\n-- does not turn over\n-- turns over\n- Driving [mc]\n-- insufficient power on partial load\n-- insufficient power on full load\n-- unsteady idle speed\n-- low idle speed\n-- \"delayed take-off\"\n-- weak acceleration\n-- \"no /else\"\n\n- \"Real mileage  /100km\" [num]\n- Engine noises [oc]\n-- knocking\n-- ringing\n-- \"no /else\"\n\nGeneral\n- Make of car [oc]\n-- VW\n-- Opel\n-- Mercedes Benz\n-- BMW\n-- Porsche\n-- Fiat\n-- Toyota\n-- Mazda\n-- Other\n- Year of construction [num]\n\nTechnical Examinations\n- \"Idle speed system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air intake system o.k.?\" [oc]\n-- yes\n-- no\n- \"Air filter o.k.?\" [oc]\n-- yes\n-- no\n- \"Ignition timing o.k.?\" [oc]\n-- yes\n-- no\n- \"Battery o.k.?\" [oc]\n-- yes\n-- no");

		saveNewKnowledge(questionnairesSecLoc,
				"General [1]\nObservations [2]\nTechnical Examinations [3]\nOther one [4]");

		saveNewKnowledge(questionnairesSecLoc,
				"General [1]\nObservations [2]\nTechnical Examinations [3]");

		saveNewKnowledge(questionnairesSecLoc, "General [1]");

		saveNewKnowledge(questionnairesSecLoc,
				"General [1]\nObservations [2]\nTechnical Examinations [3]");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n    \"Air filter o.k.?\" = no [++],\n    \"Air filter o.k.?\" = yes [--],\n    Driving = weak acceleration [!],\n    Exhaust pipe color evaluation = abnormal,\n    Engine start = engine barely starts[--],\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n    \"Idle speed system o.k.?\" = yes [--],\n    Engine start = engine barely starts [!],\n    Driving = low idle speed,\n}");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n    \"Air filter o.k.?\" = no [++],\n    \"Air filter o.k.?\" = yes [--],\n    Driving = weak acceleration [!],\n    Exhaust pipe color evaluation = abnormal,\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n    \"Idle speed system o.k.?\" = yes [--],\n    Engine start = engine barely starts [!],\n    Driving = low idle speed,\n}");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n    \"Air filter o.k.?\" = no [++],\n    \"Air filter o.k.?\" = yes [--],\n    Driving = weak acceleration [!],\n    Exhaust pipe color evaluation = abnormal,\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n\n    Driving = low idle speed,\n}");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n    \"Air filter o.k.?\" = no [++],\n    \"Air filter o.k.?\" = yes [--],\n    Driving = weak acceleration [!],\n    Exhaust pipe color evaluation = abnormal,\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n    \"Idle speed system o.k.?\" = yes [--],\n    Engine start = engine barely starts [!],\n    Driving = low idle speed,\n}");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n\n    Exhaust pipe color evaluation = abnormal,\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n    \"Idle speed system o.k.?\" = yes [--],\n    Engine start = engine barely starts [!],\n    Driving = low idle speed,\n}");

		saveNewKnowledge(coveringSecLoc, "\n");

		saveNewKnowledge(
				coveringSecLoc,
				"Clogged air filter{\n    \"Air filter o.k.?\" = no [++],\n    \"Air filter o.k.?\" = yes [--],\n    Driving = weak acceleration [!],\n    Exhaust pipe color evaluation = abnormal,\n    Mileage evaluation = increased [3],\n}\n\n\nDamaged idle speed system{\n    \"Idle speed system o.k.?\" = no [++],\n    \"Idle speed system o.k.?\" = yes [--],\n    Engine start = engine barely starts [!],\n    Driving = low idle speed,\n}");

	}

	/**
	 * Little help if you want to change every single rule in the Rules-Markup
	 * (specified by the KDOM-Element ruleArea), like deleting them, because
	 * they all have a separate QuickEdit.
	 * 
	 * @created 24.08.2010
	 * @param rulesSecLoc Common xpath of all rules (they differ only in
	 *        continously counted number at the end.
	 * @param newContents Holding the new contents for each rule.
	 * @return The old rule contents, which were overwritten by newContents.
	 */
	private String[] forEachRuleInMarkup(String rulesSecLoc, String[] newContents) {
		String[] oldContents = new String[Integer.parseInt(selenium.getXpathCount(
				"//div[@id='" + ruleArea + "']//div[@class='right']").toString())];
		// First rule has no number
		oldContents[0] = saveNewKnowledge(rulesSecLoc, newContents[0]);
		for (int i = 2; i <= Math.min(oldContents.length, newContents.length); i++) {
			oldContents[i - 1] = saveNewKnowledge(rulesSecLoc + i, newContents[i - 1]);
		}
		return oldContents;
	}

}

!!! Documentation and Example page for KnowWE-Plugin-RDFS (series of plugin) including the Turtle-Markup

%%(color:red) Warning: /% This is an __unstable early alpha version__! 


[{TableOfContents}]\\


The RDFS-Turtle-Plugin aims to provide simple to use markups to define a Ontology in RDFS.
This includes some trivial markups for the definition of new terms, a simple triple markup and, (a derivate of) the [TurtleMarkup|http://www.w3.org/TeamSubmission/turtle/].
Notice that the plugin only allows to build up the knowledge base entities in the employed semantic repository. Reasoning capabilities depend on the reasoning engine integrated within or added to the repository.


!! Turtle-Markup
The basic markup is a Turtle-Syntax inspired markup to define RDF-triples. The markup up has the following general structure:

{{{
ttl: <subject> <predicate>:: <object>

}}}

! Predefined Terms

The following vocabulray for RDF/RDFS/OWL is (currently) known by the system and can be used in case-insensitive way:

|| term || usage
| rdf:type | type / isA
| owl:class| Class
| owl:ObjectProperty | ObjectProperty
| owl:DataTypeProperty | DataTypeProperty
| owl:Thing | Thing
| rdfs:subclassOf | subclassOf
| rdfs:domain | domain
| rdfs:range | range
| rdfs: subpropertyOf | subpropertyOf


! Definition of new Terms

Arbitrary ontologies can be created using the above terminology. However, OntE provides ''closed-world authoring'', that is any new term needs explicitly be defined once (c.f. variable declaration in programming). New terms can be defined using the ''def''-keyword in the subject part:

{{{
def <mynewterm>
}}}


Terms that do not match predefined terms and are not explicity defined in above way will result in a compilation error (object not found) and the triple will not be translated to the semantic repository.

''__Notice:__'' For subject and object spaces in the term-name are allowed, while for predicates it's not. Hence, properties need to be defined without spaces!


! Some examples
Here a small __example__ from the ''domain of history'' is provided:

Alexander the Great is a Person:

def Alexander the Great


ttl: Alexander the Great isA:: Person.


Next, we need to define Person to make that statement valid: 

Class Person





To make this statement valid we add some more statements:\\


def deathPlace



ttl: deathPlace type:: ObjectProperty.


ObjectProperty deathPlace (Person, Location)


ttl: deathPlace domain:: Person.



ttl: deathPlace range:: Location.





Class Location

def Babylon

ttl: Babylon type:: City.



Class City

ObjectProperty isRelatedTo


ttl: deathPlace subpropertyOf:: isRelatedTo.




He was also a king: 

ttl Alexander the Great type:: King.



and we define King: 

Class: King





We want to state, that he died in Babylon:


ttl: Alexander the Great deathPlace:: Babylon;
                         type:: King;
                         yearOfDeath:: '323bc'.





def yearOfDeath

ttl: Alexander the Great yearOfDeath:: '323bc'.


The value is stored as plain RDF-Literal. No more distinct datatype are currently supported.


! The keyword __''this''__

With the keyword ''this'' one can refer to the termname of the current page. Note: Currently the keyword ''this'' can only be used in the subject.
Example:


ObjectProperty describes

Class Historical Essay

ttl: this type:: Historical Essay. ttl this describes:: Alexander the Great.



When tripels using the keyword ''this'' are compiled into the RDF-store, ''this'' is replaced by the name of the current wiki page (with the local namespace).

!! Subclassing Markup using a DashTree

While a subclass-hierarchy can be defined using the triple-markup it is kind of cumbersome. This can be done in a more comprehensive way using a dashtree. The syntax is the following:


{{{
%%subclass
RootClass
- Child Class 1
-- subclass 11
-- subclass 12
- Child Class 2
%
}}}


! Example:
In the following example, we say that ''Person'' and ''Location'' are subclasses of the class ''Concept of History''. Further, we state that ''King'' is a subclass of ''Person'' and 'City' and 'Island' are subclasses of 'Location'. Note that any class used in the subclassing-dashtree needs to be explictely defined in another place.
%%subclass
Concept of History
- Person
-- King
- Location
-- City
--- Babylon
-- Island 
%

We addionally need to defined the class not yet existing:\\
Class Concept of History

Class Island


[{KnowWEPlugin renderKDOM}]

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. QueryLang.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;                                  IGNORE_CASE = true;                           
                                                     }PARSER_BEGIN(QueryLang)package de.knowwe.timeline.parser;

import de.knowwe.timeline.tree.*;
import de.knowwe.timeline.Timeset;public class QueryLang/*@bgen(jjtree)*/implements QueryLangTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTQueryLangState jjtree = new JJTQueryLangState();

/*@egen*/}PARSER_END(QueryLang)SKIP :{  "\n"| "\r"| "\r\n"| "\\"| "\t"| " "}TOKEN :{  < AND : "AND" >| < OR : "OR" >| < FOR : "FOR" >}TOKEN :{  < INC : "'increase" >| < DEC : "'decrease" >| < CNG : "'change" >}TOKEN :{  < SGT : ">" >| < SLT : "<" >| < EQU : "=" >| < SGE : ">=" >| < SLE : "<=" >| < NEQ :    "!="  | "<>" >}TOKEN :{  < OPEN_PAR : "(" >| < CLOSE_PAR : ")" >}TOKEN :{  < MSEC : "ms" ("ec")? >| < SEC : "s" ("ec")? >| < MIN : "min" >| < HOUR : "h" >| < DAY : "d" >}TOKEN :{  < NUMBER :    < DIGITS >  | < DIGITS > "." < DIGITS >  | < DIGITS > "."  | "." < DIGITS >>}TOKEN :{  < NAME : < LETTER > (< LETTER > | < DIGITS >)* >}TOKEN :{  < #DIGITS : ([ "0"-"9" ])+ >}TOKEN :{  < #LETTER : [ "a"-"z", "A"-"Z", "_" ] >}SimpleNode query()        :{/*@bgen(jjtree) query */
  ASTquery jjtn000 = new ASTquery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) query */
  try {
/*@egen*/  (    or_expression()  )?  (    ";"
  )?
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void or_expression() :{}{  and_expression()  (    < OR >/*@bgen(jjtree) #or_op( 2) */
           {
             ASTor_op jjtn001 = new ASTor_op(JJTOR_OP);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ and_expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/          )*}void and_expression() :{}{  timeFilter()  (    < AND >/*@bgen(jjtree) #and_op( 2) */
            {
              ASTand_op jjtn001 = new ASTand_op(JJTAND_OP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ timeFilter()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/           )*}

void xElement()                :
{/*@bgen(jjtree) #timeFilter( 1) */
          ASTtimeFilter jjtn000 = new ASTtimeFilter(JJTTIMEFILTER);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
/*@egen*/
  	  jjtn000.comp = Comparators.SGE;}{/*@bgen(jjtree) #timeFilter( 1) */
    try {
/*@egen*/	
    < FOR > 
	(
	  jjtn000.comp = comparator()
	)?
	jjtn000.number = doubleNumber() 
	jjtn000.unit = timeUnit()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  1);
      }
    }
/*@egen*/
}

void timeFilter() :
{
}
{
  element()
  (    xElement()
  )?
}void element() :{}{  simpleElement()| "(" or_expression() ")"}void simpleElement()                :{/*@bgen(jjtree) simpleElement */
  ASTsimpleElement jjtn000 = new ASTsimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) simpleElement */
  try {
/*@egen*/  t = < NAME >  {    jjtn000.question = t.image;  }  (    jjtn000.selector = selector()  )?  (    jjtn000.comp = comparator()
    ( t= < NAME > | t = < NUMBER >)
    {    	jjtn000.compValue = t.image;
  	}  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}double doubleNumber() :{  Token t;}{  t = < NUMBER >  {    return Double.parseDouble(t.image);  }}Selectors selector() :{}{  < INC >  {    return Selectors.INCREASE;  }| < DEC >  {    return Selectors.DECREASE;  }| < CNG >  {    return Selectors.CHANGE;  }}Comparators comparator() :{}{  < SGT >  {    return Comparators.SGT;  }| < SLT >  {    return Comparators.SLT;  }| < EQU >  {    return Comparators.EQU;  }| < SGE >  {    return Comparators.SGE;  }| < SLE >  {    return Comparators.SLE;  }| < NEQ >  {    return Comparators.NEQ;  }}TimeUnit timeUnit() :{}{  < MSEC >  {    return TimeUnit.MSEC;  }| < SEC >  {    return TimeUnit.SEC;  }| < MIN >  {    return TimeUnit.MIN;  }| < HOUR >  {    return TimeUnit.HOUR;  }| < DAY >  {    return TimeUnit.DAY;  }}
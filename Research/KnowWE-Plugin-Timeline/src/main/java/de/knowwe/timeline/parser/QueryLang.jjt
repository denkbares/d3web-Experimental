/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;  visitor = true;  multi = true;  IGNORE_CASE = true;  NODE_DEFAULT_VOID = true;  VISITOR_RETURN_TYPE = "de.knowwe.timeline.Timeset";}PARSER_BEGIN(QueryLang)package de.knowwe.timeline.parser;import de.knowwe.timeline.tree.*;import de.knowwe.timeline.Timeset;public class QueryLang{}PARSER_END(QueryLang)SKIP :{  "\n"| "\r"| "\r\n"| "\\"| "\t"| " "}TOKEN :{  < AND : "AND" >| < OR : "OR" >| < FOR : "FOR" >}TOKEN :{  < INC : "'increase" >| < DEC : "'decrease" >| < CNG : "'change" >}TOKEN :{  < SGT : ">" >| < SLT : "<" >| < EQU : "=" >| < SGE : ">=" >| < SLE : "<=" >| < NEQ :    "!="  | "<>" >}TOKEN :{  < OPEN_PAR : "(" >| < CLOSE_PAR : ")" >}TOKEN :{  < MSEC : "ms" ("ec")? >| < SEC : "s" ("ec")? >| < MIN : "min" >| < HOUR : "h" >| < DAY : "d" >}TOKEN :{  < NUMBER :    < DIGITS >  | < DIGITS > "." < DIGITS >  | < DIGITS > "."  | "." < DIGITS >>}TOKEN :{  < NAME :    < LETTER >    (      < LETTER >    | < DIGITS >    )* >}TOKEN :{  < #DIGITS : ([ "0"-"9" ])+ >}TOKEN :{  < #LETTER : [ "a"-"z", "A"-"Z", "_" ] >}SimpleNode query() #query :{}{  (    or_expression()  )?  (    ";"
  )?
  < EOF >  {    return jjtThis;  }}void or_expression() :{}{  and_expression()  (    < OR > and_expression() #or_op(2))*}void and_expression() :{}{  for_expression()  (    < AND > for_expression() #and_op(2))*}void for_expression() :{}{  element()  (    < FOR > timeFilter()  )?}void timeFilter() #timeFilter(1):{  jjtThis.comp = Comparators.SGE;}{  (    jjtThis.comp = comparator()  )?  jjtThis.number = doubleNumber()   jjtThis.unit = timeUnit()}void element() :{}{  simpleElement()| "(" or_expression() ")"}void simpleElement() #simpleElement :{  Token t;}{  t = < NAME >  {    jjtThis.question = t.image;  }  (    jjtThis.selector = selector()  )?  (    jjtThis.comp = comparator()    (      t = < NAME >    | t = < NUMBER >    )    {      jjtThis.compValue = t.image;    }  )?}double doubleNumber() :{  Token t;}{  t = < NUMBER >  {    return Double.parseDouble(t.image);  }}Selectors selector() :{}{  < INC >  {    return Selectors.INCREASE;  }| < DEC >  {    return Selectors.DECREASE;  }| < CNG >  {    return Selectors.CHANGE;  }}Comparators comparator() :{}{  < SGT >  {    return Comparators.SGT;  }| < SLT >  {    return Comparators.SLT;  }| < EQU >  {    return Comparators.EQU;  }| < SGE >  {    return Comparators.SGE;  }| < SLE >  {    return Comparators.SLE;  }| < NEQ >  {    return Comparators.NEQ;  }}TimeUnit timeUnit() :{}{  < MSEC >  {    return TimeUnit.MSEC;  }| < SEC >  {    return TimeUnit.SEC;  }| < MIN >  {    return TimeUnit.MIN;  }| < HOUR >  {    return TimeUnit.HOUR;  }| < DAY >  {    return TimeUnit.DAY;  }}